---
description: when user need to update configurations
alwaysApply: false
---
# Configuration Management Guide

## Configuration Structure
The project uses Hydra for configuration management with YAML files organized in `apps/reorg-modular-structure/config/`.

## Configuration Categories
- **Agent Configs** (`config/agent/`): Define agent behavior and capabilities
  - [default.yaml](mdc:apps/reorg-modular-structure/config/agent/default.yaml) - Default agent configuration
  - [for_debug.yaml](mdc:apps/reorg-modular-structure/config/agent/for_debug.yaml) - Debug configuration
  - [owl_set.yaml](mdc:apps/reorg-modular-structure/config/agent/owl_set.yaml) - OWL-specific configuration

- **Benchmark Configs** (`config/benchmark/`): Define benchmark datasets and evaluation
  - [gaia-validation.yaml](mdc:apps/reorg-modular-structure/config/benchmark/gaia-validation.yaml) - GAIA validation
  - [bbeh.yaml](mdc:apps/reorg-modular-structure/config/benchmark/bbeh.yaml) - BBEH benchmark
  - [browsecomp.yaml](mdc:apps/reorg-modular-structure/config/benchmark/browsecomp.yaml) - BrowseComp benchmark

- **LLM Configs** (`config/llm/`): Define language model providers and settings
  - [claude.yaml](mdc:apps/reorg-modular-structure/config/llm/claude.yaml) - Anthropic Claude
  - [openai.yaml](mdc:apps/reorg-modular-structure/config/llm/openai.yaml) - OpenAI models
  - [qwen3-32b.yaml](mdc:apps/reorg-modular-structure/config/llm/qwen3-32b.yaml) - Qwen models

- **Pricing Configs** (`config/pricing/`): Define cost tracking and pricing models
  - [default.yaml](mdc:apps/reorg-modular-structure/config/pricing/default.yaml) - Default pricing

## Configuration Usage
- **Main Config**: [config.yaml](mdc:apps/reorg-modular-structure/config/config.yaml) - Root configuration
- **Hydra Integration**: Configurations are injected into [main.py](mdc:apps/reorg-modular-structure/main.py)
- **Override Syntax**: Use Hydra's override syntax for runtime configuration changes

## Configuration Best Practices
1. **Modular Design**: Keep configurations focused and composable
2. **Environment Variables**: Use Hydra's environment variable interpolation
3. **Validation**: Ensure YAML syntax is correct and values are valid
4. **Documentation**: Comment complex configuration options
5. **Testing**: Test configurations with different combinations

## Common Configuration Patterns
- **Agent Selection**: Override agent config for different behaviors
- **Model Selection**: Switch between different LLM providers
- **Benchmark Selection**: Choose specific benchmark datasets
- **Tool Configuration**: Enable/disable specific tools via agent configs

## Configuration Debugging
- Use `for_debug.yaml` for detailed logging and debugging
- Check configuration validation in Hydra output
- Verify environment variables are properly set
- Test configuration combinations before running benchmarks

